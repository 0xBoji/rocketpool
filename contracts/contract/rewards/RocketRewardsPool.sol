pragma solidity 0.6.12;

// SPDX-License-Identifier: GPL-3.0-only

import "../RocketBase.sol";
import "../../interface/token/RocketTokenRPLInterface.sol";
import "../../interface/rewards/RocketRewardsPoolInterface.sol";
import "../../interface/settings/RocketDAOSettingsInterface.sol";
import "../../interface/RocketVaultInterface.sol";
import "../../interface/RocketVaultWithdrawerInterface.sol";

import "@openzeppelin/contracts/math/SafeMath.sol";


// Holds RPL generated by the network for claiming from stakers (node operators etc)

contract RocketRewardsPool is RocketBase, RocketRewardsPoolInterface {

    // Libs
    using SafeMath for uint;

    // The names of contracts that can claim
    mapping(string => bool) claimingContracts;

    // Events
    event RPLTokensDeposited(uint256 amount, uint256 time);
    
    
    // Modifiers

    /**
    * @dev Throws if called by any sender that doesn't match a Rocket Pool claim contract
    */
    modifier onlyClaimContract() {
        // Will also throw if not a registered network contract or an old upgraded one
        require(claimingContracts[getContractName(msg.sender)] == true, "Contract is not registered to claim");
        _;
    }


    // Construct
    constructor(address _rocketStorageAddress) RocketBase(_rocketStorageAddress) public {
        // Version
        version = 1;
        // Set the claim contracts as hard coded for visibility, to add new ones will require a contract upgrade
        // Whatever is not claimed by these claimers goes to the RP DAO at the end of each collection period
        claimingContracts['rocketRewardsClaimNode'] = true;
    }

    
    // Can we claim now?
    function canClaim() override public returns (bool) { 
        // Get the dao settings contract instance
        RocketDAOSettingsInterface daoSettings = RocketDAOSettingsInterface(getContractAddress('rocketDAOSettings'));
        // Our claim period in blocks
        uint256 claimIntervalBlocks = daoSettings.getRewardsClaimIntervalBlocks();
        // Get the last claim period block
        uint256 lastClaimIntervalBlock = getUintS("rewards.pool.claim.period.lastblock");
        // Has the last claim period past yet?
        if(lastClaimIntervalBlock.add(claimIntervalBlocks) < block.number) {
            return true;
        }
        // Not yet
        return false;

    }

    // Method fired when receiving rewards from RPL token contract
    function claim() override external onlyClaimContract {
        /*
        // Make sure they can claim now
        require(canClaim(), "Claim period has not passed for claiming rewards yet");
        // Call the RPL inflation function to mint any tokens that are due before processing claim
        RocketTokenRPLInterface rplContract = RocketTokenRPLInterface(getContractAddress('rocketTokenRPL'));
        // Call it now and only mint if any intervals for inflation have passed
        if(rplContract.getInlfationIntervalsPassed() > 0) rplContract.inflationMintTokens();
        */

    }

}
