pragma solidity 0.6.12;

// SPDX-License-Identifier: GPL-3.0-only

import "../RocketBase.sol";
import "../../interface/rewards/RocketRewardsPoolInterface.sol";
import "../../interface/RocketVaultInterface.sol";
import "../../interface/RocketVaultWithdrawerInterface.sol";

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";


// Holds RPL generated by the network for claiming from stakers (node operators etc)

contract RocketRewardsPool is RocketBase, RocketRewardsPoolInterface {

    // Events
    event RPLTokensDeposited(uint256 amount, uint256 time);

    // Construct
    constructor(address _rocketStorageAddress) RocketBase(_rocketStorageAddress) public {
        version = 1;
    }

    // Method fired when receiving rewards from RPL token contract
   
    function rplTokensDeposited(uint256 _amount) override external onlyLatestContract("rocketTokenRPL", msg.sender) {
         /*
         // Valid amount?
        require(_amount > 0, "No valid amount of tokens given to deposit");
        // Get Rocket Vault
        address rocketVaultAddress = getContractAddress("rocketVault");
        // Get the token ERC20 instance
        IERC20 tokenContract = IERC20(msg.sender);
        // Send the tokens to this contract now and mint new ones for them
        if (tokenContract.approve(rocketVaultAddress, _amount)) {
            // Init Rocket Vault
            RocketVaultInterface rocketVault = RocketVaultInterface(rocketVaultAddress);
            // Now start the deposit
            rocketVault.depositToken(msg.sender, _amount);
            // Emit token transfer
            emit RPLTokensDeposited(_amount, now);
        }else{
            revert("Token transfer was not successful");
        }
        */
    }

}
